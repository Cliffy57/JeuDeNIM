#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>

struct T_case //On cree une structure qui stocke la valeur des differentes cases.
{
int Xcase;
int Ycase;
};
typedef struct T_case T_case;

struct T_Tab_Case
{
T_case taableau[4];
int nb_voisin;
};
typedef struct T_Tab_Case T_Tab_Case;

struct parametrage //On cree une structure parametrage qui regroupe toutes les informations concernant les parametres de la partie.
{
int next; //Qui commence ?
int niveau; //Quel niveau ?
int nlig; //Nombre de ligne de la partie ?
int ncol; //Nombre de colonne de la partie ?
};

typedef struct parametrage parametrage;

int hasard(int borninf,int bornsup) //Cette fonction va nous permettre d'obtenir un nombre totalement au hasard qui sera entre 2 bornes precise lors de l'appel de la fonction suivant les besoins.
{
int n;
srand((unsigned) time(NULL));
n = (rand() % (bornsup - borninf +1)) + borninf;
return n;
}

int lireentier(int borninf,int bornsup ) //Cette fonction va nous permettre de Verifier que les valeurs emise par l'utilisateur son coherente avec le jeu , une fois de plus les 2 bornes seront precise lors de l'appel de la fonction suivant les besoins.
{
int nombre_entre;
while (scanf("%d",&nombre_entre) !=1 || (borninf > nombre_entre) || (nombre_entre > bornsup))
{
printf("Le nombre saisi est invalide ! Recommencez !\n");

    }

return nombre_entre;

}

T_Tab_Case voisines( T_case pion,int xplateau,int yplateau) //Cette fonction permet de stocker les coordonnees et de detecter les differentes case voisines a la position du pion.
{
int nb_vois = 0;
T_Tab_Case voisins;
T_case epinard;
int compteur;
int compteur2;
for(compteur2=0;compteur2<=3;compteur2++)
{
epinard.Xcase=0;
epinard.Ycase=0;
voisins.taableau[compteur2] = epinard;
}
for(compteur=0;compteur<=3;compteur++)
{

        if(pion.Xcase + 1 <= xplateau && pion.Ycase <= yplateau)
        {
                epinard.Xcase = pion.Xcase + 1;
                epinard.Ycase = pion.Ycase;
                voisins.taableau[0] = epinard;
                nb_vois ++;
        }
        if(pion.Xcase +2 <= xplateau && pion.Ycase <= yplateau)
        {
                epinard.Xcase = pion.Xcase + 2;
                epinard.Ycase = pion.Ycase;
                voisins.taableau[1] = epinard;
                nb_vois ++;
        }
        if(pion.Xcase <= xplateau && pion.Ycase +1 <= yplateau)
        {
            epinard.Xcase = pion.Xcase;
            epinard.Ycase = pion.Ycase + 1;
            voisins.taableau[2] = epinard;
            nb_vois ++;
        }
        if(pion.Xcase <= xplateau && pion.Ycase +2 <= yplateau)
        {
            epinard.Xcase = pion.Xcase;
            epinard.Ycase = pion.Ycase + 2;
            voisins.taableau[3] = epinard;
            nb_vois ++;
        }
    }
    nb_vois = nb_vois/4;
    voisins.nb_voisin=nb_vois;
return voisins;

}

int nimber(T_case Caase,int Xplateau,int Yplateau) //Cette fonction va nous permettre de calculer les Nimber et de s'adapter en fonction du nombre de ligne et de colonne de chaques parties.
{
    int soustracion = Xplateau-Yplateau; //calcul permettant de connaitre les diagonales de nimbers
    int Nimber_case;
    int compteur = 1;
    int troispartrois = Xplateau+Yplateau; //intialise une variable pour un décalage 
    while(troispartrois % 3 != 0) // transforme la variable en un multiple de 3
    {
    troispartrois = troispartrois - compteur;
    }
    while (troispartrois > 0)
    {
        if (((Caase.Xcase-Caase.Ycase)==soustracion) || ((Caase.Xcase-Caase.Ycase) == soustracion - troispartrois) || ((Caase.Xcase-Caase.Ycase) == soustracion + troispartrois))
        {
        Nimber_case = 0;
        }
        else
        {
        Nimber_case = 1;
        }

        if(Caase.Xcase > Xplateau || Caase.Ycase > Yplateau || Caase.Xcase == 0 ||Caase.Ycase == 0)
        {
            Nimber_case = 1;
        }
        
        if (Nimber_case == 0)
        {
            break;
        }
        troispartrois = troispartrois -3;
        }
    return Nimber_case;
}

int ordre()
{
int next;
int borninf = 1;
int bornsup = 2;
// On demande qui commence
printf("Qui commence ? L'ordinateur (1) ou Le joueur (2) ? : ");

    // On verifie le nombre en entree
    next=lireentier(borninf,bornsup);
return next;

}
int difficulte()
{
int niveau;
int borninf = 1;
int bornsup = 4;

    // On demande la difficulte
    printf("Selectionner le niveau de 1 a 4 : ");

    // On verifie le nombre en entree
    niveau=lireentier(borninf,bornsup);
return niveau;

}
int taillecol()
{
int ncol;
int vmax=9;int vmin=2;
// On demande le nombre de colonnes
printf("Selectionner le nombre de colonnes de %d a %d : ",vmin,vmax);

    // On verifie le nombre en entree (cf ligne 37)
    ncol=lireentier(vmin,vmax);
return ncol;

}
int taillelig()
{
int nlig;
int vmax=9;int vmin=2;
// On demande le nombre de lignes
printf("Selectionner le nombre de lignes de %d a %d : ",vmin,vmax);

    // On verifie le nombre en entree (cf ligne 37)
    nlig=lireentier(vmin,vmax);
return nlig;

}

parametrage parametres()
{
parametrage param;
param.next=ordre();
param.niveau=difficulte();
param.nlig=taillelig();
param.ncol=taillecol();
printf("\n");

return param;
/*
printf("L'ordre est %d\n",next);
printf("La difficulte est de %d\n",niveau);
printf("L'ordre est %d\n",ordre());
printf("La difficulte %d\n",difficulte());*/

}

T_case Coup_joueur(int xplateau,int yplateau,T_case pion)
{
  //On indique au joueur que c'est son tour
  printf("A toi de jouer !\n\n");
  int reponse=0;
  if(pion.Ycase == yplateau-1 && pion.Xcase == xplateau-1)
  {
    //On indique au joueur ou il peut se déplacer
    printf("Ou veux tu allez?\n1.A droite\n2.En bas?\n");
    reponse = lireentier(1,2);
      //En fonction du choix du joueur on déplace le pion selon les possibilités
      switch (reponse)
      {
        case 1:
          pion.Xcase++;
          break;
          
        case 2:
          pion.Ycase++;
          break;
      }}
        
        else if(pion.Xcase == xplateau && pion.Ycase==yplateau-1)
        {
          printf("Ou veux tu allez?\n1.En bas?\n");
          reponse = lireentier(1,1);
          switch (reponse)
          {
          case 1:
            pion.Ycase++;
            break;

        }}

        else if(pion.Ycase == yplateau && pion.Xcase == xplateau-1)
        {
          printf("Ou veux tu allez?\n1.A droite\n");  
          reponse = lireentier(1,1);
          switch (reponse)
          {
          case 1:
            pion.Xcase++;
            break;
        }}

        else if(pion.Xcase == xplateau-1 && pion.Ycase!=yplateau)
        {
          printf("Ou veux tu allez?\n1.A droite\n2.En bas?\n3.En bas x2?\n");  
          reponse = lireentier(1,3);
          switch (reponse)
          {
          case 1:
            pion.Xcase++;
            break;
          
          case 2:
            pion.Ycase++;
            break;

          case 3:
            pion.Ycase = pion.Ycase +2;
            break;

        }}
        
        else if(pion.Ycase == yplateau-1 && pion.Xcase!=xplateau)
        {
          printf("Ou veux tu allez?\n1.A droite\n2.En bas?\n3.A droite x2?\n");  
          reponse = lireentier(1,3);
          switch (reponse)
          {
          case 1:
            pion.Xcase++;
            break;
          
          case 2:
            pion.Ycase++;
            break;

          case 3:
            pion.Xcase = pion.Xcase +2;
            break;
        }}
        else if(pion.Xcase == xplateau )
        {
          printf("Ou veux tu allez?\n1.En bas?\n2.En bas x2?\n");  
          reponse = lireentier(1,2);
          switch (reponse)
          {
          case 1:
            pion.Ycase++;
            break;
          
          case 2:
            pion.Ycase = pion.Ycase +2;
            break;
          }
        }
        else if(pion.Ycase == yplateau)
        {
           printf("Ou veux tu allez?\n1.A droite\n2.A droite x2?\n");  
          reponse = lireentier(1,2);
          switch (reponse)
          {
          case 1:
            pion.Xcase++;
            break;
          
          case 2:
            pion.Xcase= pion.Xcase +2;
            break;
        }}
        else
        {
          printf("Ou veux tu allez?\n1.A droite\n2.En bas?\n3.A droite x2?\n4.En bas x2?\n");  
          reponse = lireentier(1,4);
          switch (reponse)
          {
          case 1:
            pion.Xcase++;
            break;
          
          case 2:
            pion.Ycase++;
            break;
          
          case 3:
            pion.Xcase= pion.Xcase +2;
            break;

          case 4:
            pion.Ycase = pion.Ycase +2;
            break;
        }}
        //on retourne ensuite la position du pion après déplacement du joueur
        return pion;
}

T_case Coup_Ordi_Hasard(int xplateau,int yplateau,T_case pion)
{
  int nbhasard;
  //Selon la position du pion, les possibilités pour l'ordinateurs sont différentes
    if(pion.Ycase == yplateau-1 && pion.Xcase == xplateau-1)
        {
          //On tire un chiffre au hasard pour déterminer le coup de l'ordinateur selon le nombre de déplacemements disponible
          nbhasard=hasard(1,2);
          switch (nbhasard)
          {
          case 1:
            pion.Xcase++;
            break;
          
          case 2:
            pion.Ycase++;
            break;

        }}
        
        else if(pion.Xcase == xplateau && pion.Ycase==yplateau-1)
        {
         pion.Ycase++;
        }

        else if(pion.Ycase == yplateau && pion.Xcase == xplateau-1)
        {
         pion.Xcase++;
        }

        else if(pion.Xcase == xplateau-1 && pion.Ycase!=yplateau)
        {
          nbhasard=hasard(1,3);
          switch (nbhasard)
          {
          case 1:
            pion.Xcase++;
            break;
          
          case 2:
            pion.Ycase++;
            break;

          case 3:
            pion.Ycase = pion.Ycase +2;
            break;

        }}
        
        else if(pion.Ycase == yplateau-1 && pion.Xcase!=xplateau)
        {
          nbhasard=hasard(1,3);
          switch (nbhasard)
          {
          case 1:
            pion.Xcase++;
            break;
          
          case 2:
            pion.Ycase++;
            break;

          case 3:
            pion.Xcase = pion.Xcase +2;
            break;

        }}
        else if(pion.Xcase == xplateau )
        {
          nbhasard=hasard(1,2);
          switch (nbhasard)
          {
          case 1:
            pion.Ycase++;
            break;
          
          case 2:
            pion.Ycase = pion.Ycase +2;
            break;
          
          }
        }
        else if(pion.Ycase == yplateau)
        {
          nbhasard=hasard(1,2);
          switch (nbhasard)
          {
          case 1:
            pion.Xcase++;
            break;
          
          case 2:
            pion.Xcase= pion.Xcase +2;
            break;

        }}
        else
        {
          nbhasard=hasard(1,4);
          switch (nbhasard)
          {
          case 1:
            pion.Xcase++;
            break;
          
          case 2:
            pion.Ycase++;
            break;
          
          case 3:
            pion.Xcase= pion.Xcase +2;
            break;

          case 4:
            pion.Ycase = pion.Ycase +2;
            break;


        }}
        //On retourne ensuite la position du pion après déplacement de l'ordinateur 
        return pion;
}

T_case coup_ordi_gagnant( int xplateau,int yplateau, T_case pion) //fonction qui calcule un coup gagnant pour l'ordinateur
{
 
    int nimberpion = nimber(pion,xplateau,yplateau); //nimber de la case du pion
    T_case pionretour;
    int i;
    if (nimberpion == 0)    
    {
        pionretour = Coup_Ordi_Hasard(xplateau,yplateau,pion);
    }
    else if (nimberpion == 1)
    {
        T_Tab_Case voisinesbis = voisines(pion, xplateau, yplateau);
        for(i=0; i<=3; i++)
        {
            if(nimber(voisinesbis.taableau[i],xplateau,yplateau) == 0) //se déplace au nimber le plus proche
            {
                pionretour = voisinesbis.taableau[i];
                break;
            }
        }
    }
    return pionretour;
}

void affichplateau(int Xplateau,int Yplateau,int xpos,int ypos) //affiche le plateau de jeu
{
  int i=1,j=1,k=1;
  printf("   ");
  for(k=1;k!=Xplateau+1;k++)
  {
      printf(" %d ",k);
  }
  printf("\n");
  for(j=1;j<Yplateau+1;j++)
  {
    printf(" %d ",j);
    for(i=1;i<Xplateau+1;i++)
      {
        if(xpos == i && ypos ==j) //vérifie coordonnées du pion
        {
          printf("|X|");
        }
        else
        {
          printf("|-|");
        }
        Sleep(100);
      }
    printf("\n");
  }
  printf("\n");
}

void lancerpartie(int xplateau,int yplateau, parametrage parametres) //fonction principale pour le jeu
{
  printf("C'est l'heure du du-du-du-duel!\n\n");
  T_case pion = {1,1}; //initialisation du pion
  int compteur_tour = 1;
  int numberhasard;
  affichplateau(xplateau,yplateau,pion.Xcase,pion.Ycase);
  
  while(pion.Xcase != xplateau || pion.Ycase != yplateau) //condition de fin de partie
      {
        if (parametres.next == 1) //cas si ordi commence
        {
            if(compteur_tour %2 ==0) //vérifie si c'est le tour du joueur
            {
                pion = Coup_joueur(xplateau,yplateau,pion);
            }
            else
            {
                 printf("Au tour de l'ordinateur ! \n");
                switch (parametres.niveau) //différent cas selon le niveau de difficulté
                {
                    case 1:
                    
                        pion = Coup_Ordi_Hasard(xplateau,yplateau,pion);
                        break;

                     case 2:
                        numberhasard = hasard(1,3);
                        switch (numberhasard)
                        {
                            case 2:
                                pion = coup_ordi_gagnant(xplateau,yplateau,pion);
                                break;
                            
                            default:
                                pion = Coup_Ordi_Hasard(xplateau,yplateau,pion);
                                break;
                        }
                        break;
                
                    case 3:
                        numberhasard = hasard(1,3);
                        switch (numberhasard)
                        {
                            case 2:
                                pion = Coup_Ordi_Hasard(xplateau,yplateau,pion);
                                break;
                            
                            default:
                                pion = coup_ordi_gagnant(xplateau,yplateau,pion);
                                break;
                        }
                        break;
                    
                    case 4:
                        pion = coup_ordi_gagnant(xplateau,yplateau,pion);
                        break;
                }
            }
        }
        else //cas joueur commence
        {
            if(compteur_tour %2 ==0) //vérifie si c'est le tour de l'ordinateur
            {
                printf("Au tour de l'ordinateur ! \n\n");
                switch (parametres.niveau)
                {
                case 1:
                    pion = Coup_Ordi_Hasard(xplateau,yplateau,pion);
                    break;

                case 2:
                    numberhasard = hasard(1,3);
                    switch (numberhasard)
                    {
                        case 2:
                            pion = coup_ordi_gagnant(xplateau,yplateau,pion);
                            break;
                        
                        default:
                            pion = Coup_Ordi_Hasard(xplateau,yplateau,pion);
                            break;
                    }
                    break;
                
                case 3:
                    numberhasard = hasard(1,3);
                    switch (numberhasard)
                    {
                        case 2:
                            pion = Coup_Ordi_Hasard(xplateau,yplateau,pion);
                            break;
                        
                        default:
                            pion = coup_ordi_gagnant(xplateau,yplateau,pion);
                            break;
                    }
                    break;

                case 4:
                    pion = coup_ordi_gagnant(xplateau,yplateau,pion);
                    break;
                }
            }
            else
            {
              pion = Coup_joueur(xplateau,yplateau,pion);
            }
           
         }
        compteur_tour ++;
        printf("Le pion est maintenant en (%d;%d)\n\n",pion.Xcase,pion.Ycase);
    affichplateau(xplateau,yplateau,pion.Xcase,pion.Ycase);
      }
    if (parametres.next == 1) //vérifie si on a gagné ou perdu
    {
        if(compteur_tour%2 == 0)
        {
            printf("Partie termine, VOUS AVEZ PERDU");
        }
        else
        {
            printf("Partie termine, VOUS AVEZ GAGNE");
        }
        
    }
    else
    {
        if(compteur_tour%2 == 0)
        {
            printf("Partie termine, VOUS AVEZ GAGNE");
        }
        else
        {
            printf("Partie termine, VOUS AVEZ PERDU");
        }
    }
}


int main()
{   
    parametrage parametre = parametres();
    lancerpartie(parametre.ncol,parametre.nlig, parametre);
    Sleep(5000);
}
